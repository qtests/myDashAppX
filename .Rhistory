# Observe <---
observe({
updateSelectizeInput(session, "var2", choices = var2.choice())
updateSelectizeInput(session, "var3", choices = var3.choice())
})
},
options = list(height = 500)
)
runApp('C:/darbo/kodas/R/Saulute/test1_dynamicmenu/dynamic_menu2.R')
shinyApp(
ui = pageWithSidebar(
headerPanel("Painting 4"),
sidebarPanel(
uiOutput("select_var1") # <--- Replace your SelectizeInput by uiOutput
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({
tib %>%
filter(var_one == input$var1)
})
# 1st Input rendered by the server <---
output$select_var1 <- renderUI({
selectizeInput('var1', 'Select variable 1', choices = c("select" = "", levels(tib$var_one)))
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
shinyApp(
ui = pageWithSidebar(
headerPanel("Painting 5"),
sidebarPanel(
uiOutput("select_var1"),
uiOutput("select_var2"),
uiOutput("select_var3"),
uiOutput("select_var4"),
uiOutput("select_var5")
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({
tib %>%
filter(var_one == input$var1) %>%
filter(var_two == input$var2) %>%
filter(var_three == input$var3) %>%
filter(var_four == input$var4) %>%
filter(var_five == input$var5)
})
# 1st Input rendered by the server <--
output$select_var1 <- renderUI({
selectizeInput('var1', 'Select variable 1', choices = c("select" = "", levels(tib$var_one)))
})
# 2nd Input rendered by the server <--
output$select_var2 <- renderUI({
selectizeInput('var2', 'Select variable 2', choices = c("select" = "", levels(tib$var_two)))
})
# 3th Input rendered by the server <--
output$select_var3 <- renderUI({
selectizeInput('var3', 'Select variable 3', choices = c("select" = "", levels(tib$var_three)))
})
# 4th Input rendered by the server <--
output$select_var4 <- renderUI({
selectizeInput('var4', 'Select variable 4', choices = c("select" = "", levels(tib$var_four)))
})
# 5th Input rendered by the server <--
output$select_var5 <- renderUI({
selectizeInput('var5', 'Select variable 5', choices = c("select" = "", levels(tib$var_five)))
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
shinyApp(
ui = pageWithSidebar(
headerPanel("Painting 6"),
sidebarPanel(
uiOutput("select_var1"),
uiOutput("select_var2"),
uiOutput("select_var3"),
uiOutput("select_var4"),
uiOutput("select_var5")
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({
tib %>%
filter(var_one == input$var1) %>%
filter(var_two == input$var2) %>%
filter(var_three == input$var3) %>%
filter(var_four == input$var4) %>%
filter(var_five == input$var5)
})
output$select_var1 <- renderUI({
selectizeInput('var1', 'Select variable 1', choices = c("select" = "", levels(tib$var_one)))
})
output$select_var2 <- renderUI({
choice_var2 <- reactive({
tib %>%
filter(var_one == input$var1) %>%
pull(var_two) %>%
as.character()
})
selectizeInput('var2', 'Select variable 2', choices = c("select" = "", choice_var2())) # <- put the reactive element here
})
output$select_var3 <- renderUI({
choice_var3 <- reactive({
tib %>%
filter(var_one == input$var1) %>%
filter(var_two == input$var2) %>%
pull(var_three) %>%
as.character()
})
selectizeInput('var3', 'Select variable 3', choices = c("select" = "", choice_var3()))
})
output$select_var4 <- renderUI({
choice_var4 <- reactive({
tib %>%
filter(var_one == input$var1) %>%
filter(var_two == input$var2) %>%
filter(var_three == input$var3) %>%
pull(var_four) %>%
as.character()
})
selectizeInput('var4', 'Select variable 4', choices = c("select" = "", choice_var4()))
})
output$select_var5 <- renderUI({
choice_var5 <- reactive({
tib %>%
filter(var_one == input$var1) %>%
filter(var_two == input$var2) %>%
filter(var_three == input$var3) %>%
filter(var_four == input$var4) %>%
pull(var_five) %>%
as.character()
})
selectizeInput('var5', 'Select variable 5', choices = c("select" = "", choice_var5()))
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
install.packages("maps")
runApp('C:/darbo/kodas/R/Saulute/test1_dynamicmenu/dynamic_menu3.R')
countyData
countyData = read.table(
text = "State County
Delaware Kent
Delaware 'New Castle'
Delaware Sussex
'Rhode Island' Bristol
'Rhode Island' Kent
'Rhode Island' Newport
'Rhode Island' Providence
'Rhode Island' Washington",
header = TRUE, stringsAsFactors = FALSE)
countyData
source('C:/darbo/kodas/R/SystematicInv/MEOM/MEOM2.R')
# tickers = 'XBI,DIA,EEM,EFA,EWH,EWJ,EWT,EWZ,FXI,GSG,IEF,ILF,IWM,IYR,QQQ,SPY,VNQ,XLB,XLE,XLF,XLI,XLP,XLU,XLV,XLY,XLK'
tickers="XME,TAN,GXG,ENZL,NORW,ARGT,GXF,NGE,GREK,PAK,EPU,EPHE,EGPT,QAT,ECON,VNM,TUR,THD,RSX,KSA,EZA,EWY,EWW,EWU,EWS,EWQ,EWP,EWO,EWN,EWM,EWL,EWK,EWI,EWG,EWD,EWC,EWA,EPOL,EIS,EIRL,IDX,ECH,AFK,LQD,XBI,DIA,EEM,EFA,EWH,EWJ,EWT,EWZ,FXI,GSG,ILF,IWM,IYR,QQQ,SPY,VNQ,XLB,XLE,XLF,XLI,XLP,XLU,XLV,XLY,XLK,ITB,IEF"
a <- strsplit(tickers, ",")[[1]]
b <- unique(a)
stopifnot(length(a)==length(b))
a <- f.regAna(data$setup$prices)
b <- lapply(a, function(x) x[c(9, 10),c(1, 3, 4, 6) ])
print(b[sapply(b, function(x) (x[2, 2]) > 0)])
print(b[sapply(b, function(x) (x[2, 2]) > 0.5)])
shiny::runApp('C:/darbo/kodas/R/Saulute/rstudio_driling_data/erum2018/myAppX')
dat
# Cleaning
rm(list = ls(all=TRUE))
## DEPENDENCIES -------------------------------------------------------------------------
library(shiny)
library(shinydashboard)
library(tidyverse)
library(glue)
library(DT)
library(readr)
library(colourpicker)
## DATA IMPORT --------------------------------------------------------------------------
dat <- read_csv("www/budget.csv")
getwd()
setwd("C:/darbo/kodas/R/Saulute/rstudio_driling_data/erum2018/myAppX")
# Cleaning
rm(list = ls(all=TRUE))
## DEPENDENCIES -------------------------------------------------------------------------
library(shiny)
library(shinydashboard)
library(tidyverse)
library(glue)
library(DT)
library(readr)
library(colourpicker)
setwd("C:/darbo/kodas/R/Saulute/rstudio_driling_data/erum2018/myAppX")
## DATA IMPORT --------------------------------------------------------------------------
dat <- read_csv("www/budget.csv")
dat
dat %>% filter(rowMeans(is.na(.)) < 1)
dat
dat1 <- mutate(dat, asd=NA)
dat1
dat1 %>% filter(rowMeans(is.na(.)) < 1)
dat1 %>% filter(rowMeans(is.na(.)) < 1) %>% print
dat1 %>% rowMeans(is.na(.) %>% print
dat1 %>% rowMeans(is.na(.)) %>% print
dat
dat1 %>% rowMeans(is.na(.))
dat1 %>% rowMeans(is.na(.)) < 1
dat1 %>% filter(rowMeans(is.na(.)) < 1)
dat1 %>% filter(rowMeans(is.na(.)) )
dat1 %>% filter(rowMeans(is.na(.)) == 1)
dat1 %>% filter(rowMeans(is.na(.)) < 0.5)
dat1 %>% rowMeans(is.na(amount))
dat1 %>% rowMeans(is.na(.amount))
dat1 %>% rowMeans(is.na(.Data$amount))
dat1 %>% rowMeans(is.na(.))
dat1[, amount] %>% rowMeans(is.na(.))
dat1[, "amount"] %>% rowMeans(is.na(.))
dat1 %>% rowMeans(is.na(.))
a = matrix(3, 4, c(1:12))
a
a = matrix(c(1:12), 3, 4)
a
rowMeans(a)
30/4
dat1 %>% filter(rowMeans(is.na(.)) < 1)
dat2 <- rbind(dat1, NA)
dat2
tail(dat2)
dat1 %>% filter(rowMeans(is.na(.)) < 1)
dat2 %>% filter(rowMeans(is.na(.)) < 1)
tail(dat2 %>% filter(rowMeans(is.na(.)) < 1))
tail(dat2 %>% filter(colMeans(is.na(.)) < 1))
dat2 %>% filter(colMeans(is.na(.)) < 1)
tail(dat2 %>% filter(colMeans(is.na(.)) < 1))
tail(dat2 %>% filter(rowMeans(is.na(.)) < 1))
tail(dat2 %>% filter(rowMeans(is.na(.)) < 1))
dat2 %>% filter(rowMeans(is.na(.)) < 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('C:/darbo/kodas/R/Saulute/rstudio_driling_data/erum2018/myAppX/helpers.R')
runApp()
?prettyNum
runApp()
runApp()
?glue
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dataTableProxy
?wellPanel
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_treemap
??geom_treemap
runApp()
install.packages("treemapify")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
treemapified_dat
subcategory_dat()
tree_dat
clicked_square
runApp()
runApp()
subcategory_dat()
tree_dat
input$main_plot_click
debug(getClickedPoint)
treeDat
clicked_square
input$main_plot_click$x
input$main_plot_click$y
tree_dat[xmin < click$x]
select(tree_dat, xmin < click$x)
select(tree_dat, "xmin" < click$x)
select(tree_dat, xmin < 0.961)
select(tree_dat, "xmin" < 0.961)
select(tree_dat, xmin < 0.961)
select(tree_dat, .Data$xmin < 0.961)
select(tree_dat, .xmin < 0.961)
select(tree_dat, xmin)
filter(tree_dat, xmin < 0.961)
filter(tree_dat, xmin < click$x)
filter(tree_dat, xmin < click$x)
filter(tree_dat, xmin < input$main_plot_click)
filter(tree_dat, xmin < input$main_plot_click$x)
tree_dat
filter(tree_dat, xmin < input$main_plot_click$x)
filter(tree_dat, xmax > input$main_plot_click$x)
runApp()
clicked_square
filter(tree_dat, xmax > input$main_plot_click$x)
tree_dat
?geom_treemap
?treemapify
G20
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tree_dat
clicked_square
input$main_plot_click$x
input$main_plot_click$y
runApp()
?ggplot
runApp()
Q
Q
runApp()
?clickOpts
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
clicked
tree_dat
clicked_square
treeDat %>% filter(xmin < clicked$x) %>% filter(xmax > clicked$x)
tree_dat %>% filter(xmin < clicked$x) %>% filter(xmax > clicked$x)
tree_dat %>% filter(xmin < clicked$x)
tree_dat %>% filter(xmin < clicked$x) %>% filter(xmax >= clicked$x)
runApp()
runApp()
clicked
tree_dat %>% filter(xmin < clicked$x) %>% filter(xmax >= clicked$x)
tree_dat
tree_dat[, xmax]
tree_dat[, "xmax"]
tree_dat[9, "xmax"]
?print.default
print(tree_dat[9, "xmax"], digits=10)
print(as.numeric(tree_dat[9, "xmax"]), digits=10)
print(as.numeric(tree_dat[9, "xmax"]), digits=10)
1> 1.0
1>= 1.0
runApp()
clicked_square
tree_dat
tree_dat %>% filter(xmin < clicked$x) %>% filter(xmax >= clicked$x)
clicked$x
round(clicked_square, 5)
round(clicked_square[, 2:6], 5)
clicked_square[, 2:6]
clicked_square[, 1]
clicked_square
round(tree_dat, 5)
round(tree_dat[, 3:6], 5)
tree_dat[, 3:6] <- round(tree_dat[, 3:6], 5)
clicked_square <- getClickedPoint(tree_dat, clicked)
clicked_square
runApp()
Q
runApp()
2
Q
runApp()
tree_dat <- subcategory_dat() %>% treemapified_dat %>% function(x) ifelse(is.numeric(x), round(5), x)
tree_dat <- subcategory_dat() %>% treemapified_dat %>% { function(x) ifelse(is.numeric(x), round(5), x) }
tree_dat
tree_dat()
tree_dat <- subcategory_dat() %>% treemapified_dat %>% ifelse(is.numeric(.), round(., 5), .)
tree_dat
tree_dat <- subcategory_dat() %>% treemapified_dat %>% {ifelse(is.numeric(.), round(., 5), .) }
tree_dat
tree_dat <- subcategory_dat() %>% treemapified_dat
tree_dat
tree_dat <- subcategory_dat() %>% treemapified_dat %>% ifelse(is.numeric(.), round(., 5), .)
tree_dat
tree_dat <- subcategory_dat() %>% treemapified_dat %>% ifelse(is.numeric(.), print (.), print(.))
args(ifelse)
tree_dat <- subcategory_dat() %>% treemapified_dat %>% FUN=function(x) ifelse(is.numeric(x), print (x), print(x))
tree_dat <- subcategory_dat() %>% treemapified_dat %>% function(x) ifelse(is.numeric(x), print (x), print(x))
tree_dat <- subcategory_dat() %>% treemapified_dat %>% { ifelse(is.numeric(.), print (.), print(.))  }
tree_dat <- subcategory_dat() %>% treemapified_dat %>% { ifelse(is.numeric(.), round (., 5), print(.))  }
tree_dat <- subcategory_dat() %>% treemapified_dat %>% { ifelse(is.numeric(.), round (., 1), print(.))  }
tree_dat <- subcategory_dat() %>% treemapified_dat %>% { ifelse(is.numeric(.), round (., 1), .))  }
tree_dat <- subcategory_dat() %>% treemapified_dat %>% { ifelse(is.numeric(.), round (., 1), . )  }
tree_dat
subcategory_dat() %>% treemapified_dat %>% { ifelse(is.numeric(.), round (., 1), . )  }
subcategory_dat() %>% treemapified_dat %>% { ifelse(is.numeric(.), round (., 1), print(.))  }
subcategory_dat() %>% treemapified_dat %>% { ifelse(is.numeric(.), print("A"), print(.))  }
subcategory_dat() %>% treemapified_dat %>% { ifelse(is.numeric(.), print("A"), print("B") )  }
subcategory_dat() %>% treemapified_dat %>% { ifelse(print(.), print("A"), print("B") )  }
subcategory_dat() %>% treemapified_dat %>% { ifelse(print(.); TRUE, print("A"), print("B") )  }
subcategory_dat() %>% treemapified_dat %>% { ifelse({print(.); TRUE}, print("A"), print("B") )  }
subcategory_dat() %>% treemapified_dat %>% group_modify(~ifelse(is.numeric(.x), print("A"), print("B") ))
subcategory_dat() %>% treemapified_dat %>% group_modify(~ifelse(is.numeric(.x), tibble("A"), tibble("B") ))
subcategory_dat() %>% treemapified_dat %>% group_modify(~ifelse(is.numeric(.x), round(.x, 5), .x ))
subcategory_dat() %>% treemapified_dat %>% group_map(~ifelse(is.numeric(.x), round(.x, 5), .x ))
subcategory_dat() %>% treemapified_dat %>% group_map(~ifelse(is.numeric(.x), round(.x, 5), .x ))
subcategory_dat() %>% treemapified_dat %>% group_map(~ifelse(is.numeric(.x), .x, .x ))
subcategory_dat()
subcategory_dat() %>% treemapified_dat
subcategory_dat() %>% treemapified_dat %>% group_map(~ifelse(is.numeric(.x), .x, .x ))
subcategory_dat() %>% treemapified_dat %>% group_modify(~ifelse(is.numeric(.x), .x, .x ))
subcategory_dat() %>% treemapified_dat %>% ggroup_map(~ifelse(is.numeric(.x), .x, .x ))
subcategory_dat() %>% treemapified_dat %>% group_map(~ifelse(is.numeric(.x), .x, .x ))
subcategory_dat() %>% treemapified_dat %>% group_modify(~ifelse(is.numeric(.x), .x, .x ))
runApp()
tree_dat
apply (tree_dat, 2, round)
apply (tree_dat, 2, function(x) ifelse( is.numeric(x), round (x, 5), x) )
apply (tree_dat, 1, function(x) ifelse( is.numeric(x), round (x, 5), x) )
apply (tree_dat, 2, function(x) ifelse( is.numeric(x), round (x, 5), x) )
tree_dat
tree_dat[, c("ymax",  "ymin",  "xmin",  "xmax")]
tree_dat[, c("ymax",  "ymin",  "xmin",  "xmax")] <- round(tree_dat[, c("ymax",  "ymin",  "xmin",  "xmax")], 5)
runApp()
runApp()
runApp()
runApp()
removeTab
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
subsettedData()
input$studio_subcategory
Q
runApp()
divID
divClass
btnID
format(Sys.time(), "%H%M%OS3")
divID
sub_dat
val
divID
divClass
subtitle
Q
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/darbo/kodas/R/Saulute/rstudio_driling_data/erum2018/app')
runApp()
Q
runApp()
subsettedData()
a <- subsettedData()
a %>% filter(subcategory %in% input$studio_subcategory)
studioTabAmountDirection()
input$studio_amount
a %>% filter(subcategory %in% input$studio_subcategory) %>% filter(studioTabAmountDirection()(amount, input$studio_amount)) %>%
print
a %>% filter(subcategory %in% input$studio_subcategory) %>% filter(studioTabAmountDirection()(amount, input$studio_amount))
a %>% filter(subcategory %in% input$studio_subcategory) %>% filter(studioTabAmountDirection()(amount, input$studio_amount)) %>%
mutate(total = count(amount) )
a %>% filter(subcategory %in% input$studio_subcategory) %>% filter(studioTabAmountDirection()(amount, input$studio_amount)) %>% mutate( total = nc(amount))
a %>% filter(subcategory %in% input$studio_subcategory) %>% filter(studioTabAmountDirection()(amount, input$studio_amount)) %>% mutate( total = n(amount))
a %>% filter(subcategory %in% input$studio_subcategory) %>% filter(studioTabAmountDirection()(amount, input$studio_amount)) %>% mutate( total = n())
?count
runApp()
dplyr::count
runApp()
